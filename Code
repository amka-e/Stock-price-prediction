import pandas as pd
import numpy as np
import yfinance as yf
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

#  Fetch stock data
def get_stock_data(stock_symbol, start_date, end_date):
    data = yf.download(stock_symbol, start=start_date, end=end_date)
    return data

#  Preprocessing
def preprocess_data(data):
    data['Prev_Close'] = data['Close'].shift(1)
    data.dropna(inplace=True)
    return data

# Splitting Data
def split_data(data):
    X = data[['Prev_Close']].values
    y = data['Close'].values
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    return X_train, X_test, y_train, y_test

#  Model Training
def train_model(X_train, y_train):
    scaler = MinMaxScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    model = LinearRegression()
    model.fit(X_train_scaled, y_train)
    return model, scaler

# Prediction & Evaluation
def predict_stock(model, scaler, X_test, y_test):
    X_test_scaled = scaler.transform(X_test)
    y_pred = model.predict(X_test_scaled)
    mse = mean_squared_error(y_test, y_pred)
    print(f"Mean Squared Error: {mse}")
    return y_pred

# Plot Results
def plot_results(y_test, y_pred):
    plt.figure(figsize=(10, 5))
    plt.plot(y_test, label='Actual')
    plt.plot(y_pred, label='Predicted')
    plt.legend()
    plt.title('Stock Price Prediction')
    plt.show()

# Example Usage
if __name__ == "__main__":
    stock_symbol = 'AAPL'  # Example stock symbol
    start_date = '2020-01-01'
    end_date = '2024-12-31'

    stock_data = get_stock_data(stock_symbol, start_date, end_date)
    processed_data = preprocess_data(stock_data)
    X_train, X_test, y_train, y_test = split_data(processed_data)
    model, scaler = train_model(X_train, y_train)
    y_pred = predict_stock(model, scaler, X_test, y_test)
    plot_results(y_test, y_pred)
